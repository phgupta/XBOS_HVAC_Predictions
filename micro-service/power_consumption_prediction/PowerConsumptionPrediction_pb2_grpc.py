# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import PowerConsumptionPrediction_pb2 as PowerConsumptionPrediction__pb2


class PowerConsumptionPredictionStub(object):
  """RPC definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetPowerConsumptionPrediction = channel.unary_unary(
        '/power_consumption_prediction.PowerConsumptionPrediction/GetPowerConsumptionPrediction',
        request_serializer=PowerConsumptionPrediction__pb2.Request.SerializeToString,
        response_deserializer=PowerConsumptionPrediction__pb2.Reply.FromString,
        )


class PowerConsumptionPredictionServicer(object):
  """RPC definition.
  """

  def GetPowerConsumptionPrediction(self, request, context):
    """A simple RPC.
    An error is returned if there is no meter data for the given request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PowerConsumptionPredictionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetPowerConsumptionPrediction': grpc.unary_unary_rpc_method_handler(
          servicer.GetPowerConsumptionPrediction,
          request_deserializer=PowerConsumptionPrediction__pb2.Request.FromString,
          response_serializer=PowerConsumptionPrediction__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'power_consumption_prediction.PowerConsumptionPrediction', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
